#ステージした変更を取り消す
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>

#全変更を取り消す
git reset HEAD .

指定した変更をステージから取り消すだけ。
ワークツリーのファイルには影響を与えない。

ステージに追加した状態で、もしワークツリーのファイルを取り消す場合は、git reset HEAD のあとに、git checkoutを実行する必要がある。
-----------------


#直前のコミットを修正する
git commit --amend
amend = 修正する
※pushしたコミットはやり直したらダメ！他の人が困る。

手順
例:コミットしたが、ファイルにミスがあった
①ワークツリーの該当ファイルに変更を加える
②git add でステージに追加
③git commit --amend で直前のコミットを修正
(②で新たにaddされたファイル情報でコミットされているファイルを修正)

※pushした後に修正が必要になった場合は、修正するのではなく、
新たにgit commitをして情報を更新するようにする。


-----------
#リモートから情報を取得する (フェッチ)
fetch = 取ってくる

git fetch <リモート名> (ローカルリポジトリに情報が渡る)
git merge (ワークツリーに反映する)


#リモートから情報を取得する (プル)
mergeまでを一度に行いたいとき
git pull <リモート名><ブランチ名>

☆基本的にフェッチを使うのがおすすめ。
  プルは挙動が特殊なので慣れるまでは注意が必要。

  git pullを行うと、現在いるブランチにプルした内容がマージされる。

  masterブランチにいる状態で、git pull origin hogeを実行すると、ローカルリポジトリにその内容が記録され、最後にmasterブランチのワークツリーのファイル内容がマージで統合される。


#リモートの詳細情報を表示する
git remote show <リモート名>
git remote show origin


#ブランチを新規追加する
git branch <ブランチ名>
git branch feature

#ブランチを切り替える
git checkout <既存ブランチ名>
git checkout feature

#ブランチの新規作成と切り替えを同時に行う
git checkout -b <新ブランチ名>


#それぞれのブランチが、どのコミットを指しているかを調べる
git log --oneline --decorate
→--onelineは、git logを1行で表示している
  --decorateが、どのブランチがどのコミットを指し示すか確認する


#マージ 取り込み方法は3つある
Fast Foward: 早送りマージ = ブランチが分かれず、ポインタが前に進むだけ。
Auto Merge: 基本的なマージ = 新しいコミットファイルが作成され、そこにポインタが移動する。
            ※通常のgit commitで作られるコミットファイルはparentが1つしかないが、Auto Mergeで作成された
              コミットファイルにはparentが2つ存在している。



#マージ   他の人の変更内容を取り込む作業のこと
git merge <ブランチ名>
git merge <リモート名/ブランチ名>
git merge origin/feature

#マージの準備
メインブランチに切り替える: マージを行う前に、マージ先のブランチ（通常はmasterやmainブランチ）に切り替える。
最新の変更を取得: マージ先のブランチが最新の状態であることを確認する。
これには、リモートリポジトリから最新の変更を取り込む（git pull）ことが含まれることがある。

#マージの実行
マージコマンドの実行: マージを実行するには、git merge <ブランチ名> コマンドを使用する。
ここで<ブランチ名>はマージしたいブランチ名。
コンフリクトの解決: マージ中に同じファイルの同じ部分が異なるブランチで変更されていると、コンフリクト（衝突）が発生することがある。
この場合は、手動でコンフリクトを解決し、解決したファイルを再度コミットする必要がある。

