#ステージした変更を取り消す
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>

#全変更を取り消す
git reset HEAD .

指定した変更をステージから取り消すだけ。
ワークツリーのファイルには影響を与えない。

ステージに追加した状態で、もしワークツリーのファイルを取り消す場合は、git reset HEAD のあとに、git checkoutを実行する必要がある。
-----------------


#直前のコミットを修正する
git commit --amend
amend = 修正する
※pushしたコミットはやり直したらダメ！他の人が困る。

手順
例:コミットしたが、ファイルにミスがあった
①ワークツリーの該当ファイルに変更を加える
②git add でステージに追加
③git commit --amend で直前のコミットを修正
(②で新たにaddされたファイル情報でコミットされているファイルを修正)

※pushした後に修正が必要になった場合は、修正するのではなく、
新たにgit commitをして情報を更新するようにする。


-----------
#リモートから情報を取得する (フェッチ)
fetch = 取ってくる

git fetch <リモート名> (ローカルリポジトリに情報が渡る)
git merge (ワークツリーに反映する)


#リモートから情報を取得する (プル)
mergeまでを一度に行いたいとき
git pull <リモート名><ブランチ名>

☆基本的にフェッチを使うのがおすすめ。
  プルは挙動が特殊なので慣れるまでは注意が必要。

  git pullを行うと、現在いるブランチにプルした内容がマージされる。

  masterブランチにいる状態で、git pull origin hogeを実行すると、ローカルリポジトリにその内容が記録され、最後にmasterブランチのワークツリーのファイル内容がマージで統合される。


#リモートの詳細情報を表示する
git remote show <リモート名>
git remote show origin


#ブランチを新規追加する
git branch <ブランチ名>
git branch feature

#ブランチを切り替える
git checkout <既存ブランチ名>
git checkout feature

#ブランチの新規作成と切り替えを同時に行う
git checkout -b <新ブランチ名>


#それぞれのブランチが、どのコミットを指しているかを調べる
git log --oneline --decorate
→--onelineは、git logを1行で表示している
  --decorateが、どのブランチがどのコミットを指し示すか確認する
